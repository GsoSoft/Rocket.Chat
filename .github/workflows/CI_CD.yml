#   CI and CI to help reducing pain during integration and deployment

name: CI and CD

on:
  release:
    types: [published]  # asas
  pull_request:
    branches: 'develop'
  push:
    branches:
      - develop

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

env:
  CI: true
  MONGO_URL: mongodb://localhost:27017
  TOOL_NODE_FLAGS: --max_old_space_size=4096

jobs:
  build:  #### 1
    runs-on: ubuntu-20.04

    steps:
      - name: Github Info
        run: |
          echo "GITHUB_ACTION: $GITHUB_ACTION"
          echo "GITHUB_ACTOR: $GITHUB_ACTOR"
          echo "GITHUB_REF: $GITHUB_REF"
          echo "GITHUB_HEAD_REF: $GITHUB_HEAD_REF"
          echo "GITHUB_BASE_REF: $GITHUB_BASE_REF"
          echo "github.event_name: ${{ github.event_name }}"
          cat $GITHUB_EVENT_PATH

      - name: Use Node.js 14.18.3
        uses: actions/setup-node@v3
        with:
          node-version: '14.18.3'

      - uses: actions/checkout@v3

      - name: Free disk space
        run: |
          sudo swapoff -a
          sudo rm -f /swapfile
          sudo apt clean
          docker rmi $(docker image ls -aq)
          df -h

      # TODO is this required?
      # - name: check package-lock
      #   run: |
      #     npx package-lock-check

      - name: Cache cypress
        id: cache-cypress
        uses: actions/cache@v2
        with:
          path: /home/runner/.cache/Cypress
          key: ${{ runner.OS }}-cache-cypress-${{ hashFiles('**/package-lock.json', '.github/workflows/build_and_test.yml') }}
      - uses: c-hive/gha-yarn-cache@v2
      - name: Cache turbo
        id: cache-turbo
        uses: actions/cache@v2
        with:
          path: |
            ./node_modules/.turbo
          key: ${{ runner.OS }}-turbo-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-turbo-
            ${{ runner.os }}-

      # TODO change to use turbo cache
      - name: Cache meteor local
        uses: actions/cache@v2
        with:
          path: ./apps/meteor/.meteor/local
          key: ${{ runner.OS }}-meteor_cache-${{ hashFiles('apps/meteor/.meteor/versions') }}
          restore-keys: |
            ${{ runner.os }}-meteor_cache-
            ${{ runner.os }}-
      - name: Cache meteor
        uses: actions/cache@v2
        with:
          path: ~/.meteor
          key: ${{ runner.OS }}-meteor-${{ hashFiles('apps/meteor/.meteor/release') }}
          restore-keys: |
            ${{ runner.os }}-meteor-
            ${{ runner.os }}-
      - name: Install Meteor
        run: |
          # Restore bin from cache
          set +e
          METEOR_SYMLINK_TARGET=$(readlink ~/.meteor/meteor)
          METEOR_TOOL_DIRECTORY=$(dirname "$METEOR_SYMLINK_TARGET")
          set -e
          LAUNCHER=$HOME/.meteor/$METEOR_TOOL_DIRECTORY/scripts/admin/launch-meteor
          if [ -e $LAUNCHER ]
          then
            echo "Cached Meteor bin found, restoring it"
            sudo cp "$LAUNCHER" "/usr/local/bin/meteor"
          else
            echo "No cached Meteor bin found."
          fi

          # only install meteor if bin isn't found
          command -v meteor >/dev/null 2>&1 || curl https://install.meteor.com | sed s/--progress-bar/-sL/g | /bin/sh

      - name: Versions
        run: |
          npm --versions
          yarn -v
          node -v
          meteor --version
          meteor npm --versions
          meteor node -v
          git version

      - name: yarn install
        # if: steps.cache-nodemodules.outputs.cache-hit != 'true' || steps.cache-cypress.outputs.cache-hit != 'true'
        run: yarn
        # disable yarn lint for now?
      - run: yarn lint

      - run: yarn turbo run translation-check

      - name: TS typecheck
        run: |
          yarn turbo run typecheck

      - name: Reset Meteor
        if: startsWith(github.ref, 'refs/tags/') == 'true' || github.ref == 'refs/heads/develop'
        run: |
          cd ./apps/meteor
          meteor reset

      - name: Build Rocket.Chat From Pull Request
        if: startsWith(github.ref, 'refs/pull/') == true
        env:
          METEOR_PROFILE: 1000
        run: |
          yarn build:ci -- --debug --directory /tmp/build-test

      - name: Build Rocket.Chat
        if: startsWith(github.ref, 'refs/pull/') != true
        run: |
          yarn build:ci -- --directory /tmp/build-test

      - name: Prepare build
        run: |
          mkdir /tmp/build/
          cd /tmp/build-test
          tar czf /tmp/build/Rocket.Chat.tar.gz bundle
          cd /tmp/build-test/bundle/programs/server
          npm install --production
          cd /tmp
          tar czf Rocket.Chat.test.tar.gz ./build-test

      - name: Store build for tests
        uses: actions/upload-artifact@v2
        with:
          name: build-test
          path: /tmp/Rocket.Chat.test.tar.gz

      - name: Store build
        uses: actions/upload-artifact@v2
        with:
          name: build
          path: /tmp/build

  test:
    runs-on: ubuntu-20.04
    needs: build

    strategy:
      matrix:
        node-version: ['14.18.3']
        mongodb-version: ['5.0']

    steps:
      - name: Launch MongoDB
        uses: wbari/start-mongoDB@v0.2
        with:
          mongoDBVersion: ${{ matrix.mongodb-version }} --replSet=rs0

      - name: Restore build for tests
        uses: actions/download-artifact@v2
        with:
          name: build-test
          path: /tmp

      - name: Decompress build
        run: |
          cd /tmp
          tar xzf Rocket.Chat.test.tar.gz
          cd -

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - name: Setup Chrome
        run: |
          npm i chromedriver

      - name: Configure Replica Set
        run: |
          docker exec mongo mongo --eval 'rs.initiate({_id:"rs0", members: [{"_id":1, "host":"localhost:27017"}]})'
          docker exec mongo mongo --eval 'rs.status()'

      - uses: actions/checkout@v3

      - name: Cache cypress
        id: cache-cypress
        uses: actions/cache@v2
        with:
          path: /home/runner/.cache/Cypress
          key: ${{ runner.OS }}-cache-cypress-${{ hashFiles('**/package-lock.json', '.github/workflows/build_and_test.yml') }}
          restore-keys: |
            ${{ runner.os }}-cache-cypress-
            ${{ runner.os }}-
      - uses: c-hive/gha-yarn-cache@v2
      - name: Cache turbo
        id: cache-turbo
        uses: actions/cache@v2
        with:
          path: |
            ./node_modules/.turbo
          key: ${{ runner.OS }}-turbo-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-turbo-
            ${{ runner.os }}-

      - name: Yarn install
        # if: steps.cache-nodemodules.outputs.cache-hit != 'true' || steps.cache-cypress.outputs.cache-hit != 'true'
        run: yarn

      - name: Unit Test
        run: yarn testunit

      #   - name: Install Playwright
      #    run: |
      #     cd ./apps/meteor
      #    npx playwright install --with-deps

      - name: E2E Test API
        env:
          TEST_MODE: 'true'
          MONGO_URL: mongodb://localhost:27017/rocketchat
          MONGO_OPLOG_URL: mongodb://localhost:27017/local
        run: |
          cd ./apps/meteor
          echo -e 'pcm.!default {\n type hw\n card 0\n}\n\nctl.!default {\n type hw\n card 0\n}' > ~/.asoundrc
          Xvfb -screen 0 1024x768x24 :99 &
          for i in $(seq 1 5); do (docker exec mongo mongo rocketchat --eval 'db.dropDatabase()') && npm run testci -- --test=testapi && s=0 && break || s=$? && sleep 1; done; (exit $s)

      - name: E2E Test UI (Legacy - Cypress)
        env:
          TEST_MODE: 'true'
          MONGO_URL: mongodb://localhost:27017/rocketchat
          MONGO_OPLOG_URL: mongodb://localhost:27017/local
        run: |
          cd ./apps/meteor
      # echo -e 'pcm.!default {\n type hw\n card 0\n}\n\nctl.!default {\n type hw\n card 0\n}' > ~/.asoundrc
      #    Xvfb -screen 0 1024x768x24 :99 &
      #   for i in $(seq 1 2); do (docker exec mongo mongo rocketchat --eval 'db.dropDatabase()') && npm run testci -- --test=testui && s=0 && break || s=$? && ([ ! -w tests/cypress/screenshots ] || mv tests/cypress/screenshots tests/cypress/screenshots-$i) && ([ ! -w tests/cypress/videos ] || mv tests/cypress/videos tests/cypress/videos-$i) && sleep 1; done; (exit $s)

      - name: E2E Test UI
        env:
          TEST_MODE: 'true'
          MONGO_URL: mongodb://localhost:27017/rocketchat
          MONGO_OPLOG_URL: mongodb://localhost:27017/local
        run: |
          cd ./apps/meteor
          echo -e 'pcm.!default {\n type hw\n card 0\n}\n\nctl.!default {\n type hw\n card 0\n}' > ~/.asoundrc
        #    Xvfb -screen 0 1024x768x24 :99 &
        #  docker exec mongo mongo rocketchat --eval 'db.dropDatabase()' && npm run testci -- --test=test:playwright

      - name: Store playwright test trace
        uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: playwright-test-trace
          path: ./apps/meteor/tests/e2e/test-failures*

      - name: Store cypress test screenshots
        uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: cypress-test-screenshots
          path: ./apps/meteor/tests/cypress/screenshots*

      - name: Store cypress test videos
        uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: cypress-test-videos
          path: ./apps/meteor/tests/cypress/videos*




  deploy:  ## https://docs.rocket.chat/quick-start/installing-and-updating/other-deployment-methods/manual-installation/debian-based-distros/ubuntu
    runs-on: [self-hosted, linux, x64, gso-staging]
    if: github.event_name == 'release'      #  || github.ref == 'refs/heads/develop'
    needs: [test]

    steps:
      #      - uses: actions/checkout@v3

      - name: Restore build
        uses: actions/download-artifact@v2
        with:
          name: build
          path: /tmp/gso-build

      - name: Run on Pm2
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: 'us-east-1'

        run: |
          cd /tmp/gso-build
          tar xzf Rocket.Chat.tar.gz
          rm Rocket.Chat.tar.gz
          cd /tmp/gso-build/bundle/programs/server && npm install --production
          sudo mv /opt/gso /opt/gso_$(date +%F)
          sudo mv /tmp/gso-build/bundle /opt/gso
          pm2 startOrRestart /etc/pm2/apps.config.js --env production
